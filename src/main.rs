use std::env::args;
use std::io::{stdout, BufWriter};

use anyhow::Result;

use crate::model::{
    AutoGeneratedVariable, Block, Comment, SimpleVariable, VariableWithDefaultValue,
    VariableWithRandomValue, Variables,
};
use crate::parser::Parser;

mod model;
mod parser;

fn main() -> Result<()> {
    if let Some(path) = args().nth(1) {
        let out = BufWriter::new(stdout());
        let mut parser = Parser::new(out);
        parser.parse(path)?;
        return Ok(());
    }

    let title = Comment {
        contents: "42".to_string(),
    };
    let description = Some(Comment {
        contents: "Fourty-two".to_string(),
    });
    let variable1 = Variables::Simple(SimpleVariable {
        name: "ANSWER".to_string(),
        input: "42".to_string(),
    });
    let variable2 = Variables::Simple(SimpleVariable {
        name: "AS_TEXT".to_string(),
        input: "fourty two".to_string(),
    });
    let variable3 = Variables::DefaultValue(VariableWithDefaultValue {
        name: "DEFAULT_VALUE_ONE".to_string(),
        input: "".to_string(),
        default: "default".to_string(),
    });
    let variable4 = Variables::DefaultValue(VariableWithDefaultValue {
        name: "DEFAULT_VALUE_ONE".to_string(),
        input: "custom".to_string(),
        default: "default".to_string(),
    });
    let variable5 = Variables::Random(VariableWithRandomValue {
        name: "SECRET_KEY".to_string(),
        length: None,
    });
    let variable6 = Variables::AutoGenerated(AutoGeneratedVariable::new(
        "AUTO_GENERATED".to_string(),
        "{ANSWER}-{DEFAULT_VALUE_ONE}".to_string(),
    ));
    let variables = vec![
        variable1, variable2, variable3, variable4, variable5, variable6,
    ];
    let block = Block::new(title, description, variables);
    println!("{block}");
    Ok(())
}
